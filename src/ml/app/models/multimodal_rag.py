# üìÅ app/models/rag/multimodal_rag.py

from ml.app.models.generator.chain import HybridGraphRagGenerator
from ml.app.models.retriever.hybrid_retriever import HybridGraphRagRetriever
from ml.app.models.processor.WDM_processor import WDMProcessor
class MultimodalRAG:
    def __init__(self):
        self.generator = HybridGraphRagGenerator()
        self.retriever = HybridGraphRagRetriever()

    # def index_document(self, raw_data: str):
    #     self.retriever.create_collection()
    #     nodes, relationships = self.retriever.extract_graph_components(raw_data)
    #     node_ids = self.retriever.ingest_to_neo4j(nodes, relationships)
    #     self.retriever.ingest_to_qdrant(node_ids)
    #     return {"status": "indexed", "node_count": len(node_ids)}

    def index_document(self, pdf_path: str):
        """
        ƒê·∫ßu v√†o: ƒë∆∞·ªùng d·∫´n t·ªõi file PDF
        Quy tr√¨nh:
        - D√πng WDMProcessor ƒë·ªÉ tr√≠ch xu·∫•t text, table, image t·ª´ PDF
        - M·ªói ph·∫ßn t·ª≠ s·∫Ω th√†nh m·ªôt LangchainDocument
        - V·ªõi m·ªói document, tr√≠ch ƒë·ªì th·ªã tri th·ª©c v√† l∆∞u v√†o Neo4j + Qdrant
        """
        print(f"[+] B·∫Øt ƒë·∫ßu x·ª≠ l√Ω file PDF: {pdf_path}")

        # B∆∞·ªõc 1: Tr√≠ch xu·∫•t t√†i li·ªáu t·ª´ PDF b·∫±ng WDMProcessor
        processor = WDMProcessor(
            pdf_path=pdf_path,
            output_folder="./extracted_images",
            gcs_bucket_name="my-multimodalrag-images"
        )
        documents = processor.process_pdf()

        print(f"[+] T√¨m th·∫•y {len(documents)} t√†i li·ªáu. B·∫Øt ƒë·∫ßu indexing...")

        all_node_ids = []

        for doc in documents:
            content = doc.page_content
            metadata = doc.metadata

            # B∆∞·ªõc 2: Tr√≠ch ƒë·ªì th·ªã tri th·ª©c t·ª´ n·ªôi dung c·ªßa t·ª´ng document
            nodes, relationships = self.retriever.extract_graph_components(content)

            # B∆∞·ªõc 3: L∆∞u v√†o Neo4j
            node_id_map = self.retriever.ingest_to_neo4j(nodes, relationships)

            # B∆∞·ªõc 4: L∆∞u vector embedding v√†o Qdrant
            self.retriever.ingest_to_qdrant(node_id_map)

            all_node_ids.extend(node_id_map.values())

        return {"status": "indexed", "node_count": len(all_node_ids)}

    def query(self, question: str, mode: str = "concise"):
        top_k_docs = self.generator.retriever_search(question)
        entity_ids = [doc.metadata["id"] for doc in top_k_docs]

        graph_context = self.generator.fetch_related_graph(entity_ids)

        # Fusion / rerank c√≥ th·ªÉ ch√®n t·∫°i ƒë√¢y (n·∫øu c·∫ßn t√≠ch h·ª£p th√™m)
        # V√≠ d·ª•: b·∫°n c√≥ th·ªÉ l√†m re-score d·ª±a v√†o s·ªë hop, t·∫ßn su·∫•t edge, ho·∫∑c semantic reranker

        answer = self.generator.graphRAG_run(graph_context, question, mode=mode)
        return {
            "question": question,
            "context_nodes": graph_context["nodes"],
            "context_edges": graph_context["edges"],
            "answer": answer,
        }
